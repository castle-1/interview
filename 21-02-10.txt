1.restful을 적용하여 게시판을 구현을 완성하시오.(URL 설계 포함)
 - 컨트롤러 - 
package edu.bit.board.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

import edu.bit.board.service.BoardService;
import edu.bit.board.vo.BoardVO;
import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j
@AllArgsConstructor
@RestController
@RequestMapping("/restful/*") // restful로 치고들어오는 모든 주소
public class RestBoardController {
	private BoardService boardService;

	// 1.list - 처음 진입 화면이므로 화면이 깜박여도 상관없으므로 @controller 방식으로 접근 - view를 리턴
	@GetMapping("/board")
	public ModelAndView list(ModelAndView mav) {
		mav.setViewName("rest_list");
		mav.addObject("list", boardService.getList());
		return mav;
	}

	// 2. contentView
	/*
	 * @GetMapping("/board/{bId}") // @pathvariable 사용도 가능 public String
	 * rest_content_view(BoardVO boardvo, Model model) {
	 * log.info("rest_content_view"); model.addAttribute("content_view",
	 * boardService.getBoard(boardvo.getbId())); return "content_view"; }
	 */
	@GetMapping("/board/{bId}")
	public ModelAndView rest_content_view(ModelAndView mav, Model model, BoardVO boardvo) {
		log.info("rest_content_view");
		mav.setViewName("content_view");
		mav.addObject("content_view", boardService.getBoard(boardvo.getbId()));
		return mav;
	}

	// 3.delete
	@DeleteMapping("/delete/{bId}")
	public ResponseEntity<String> rest_delete(BoardVO boardvo, Model model) {
		ResponseEntity<String> entity = null;
		log.info("rest_delete");

		try {

			boardService.deleteBoard(boardvo.getbId());

			// 삭제 성공 성공 상태메시지 저장
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK); // ajax의 result로 넘어감

		} catch (Exception e) {
			e.printStackTrace();
			// 삭제 실패 실패 상태메시지 저장
			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		// 삭제 처리 HTTP 상태 메시지 리턴
		return entity;
	}

	// 수정
	@PutMapping("/modify/{bId}")
	public ResponseEntity<String> modify(@RequestBody BoardVO boardvo ) throws Exception {
		ResponseEntity<String> entity = null;
		
		log.info("modify");

		try {
			
			boardService.modifyBoard(boardvo);
			
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK); // ajax의result로 넘어감
		} catch (Exception e) {
			e.printStackTrace();

			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}

		return entity;
	}
	
	
	
	//댓글 페이지
	@GetMapping("/reply_view/{bId}")
	public ModelAndView reply_view(ModelAndView mav,BoardVO boardVO) {
		mav.setViewName("reply_view");
		mav.addObject("reply_view", boardService.getBoard(boardVO.getbId()));
		return mav;
	}
	
	//댓글
	@PostMapping("/reply/{bId}")
	public ResponseEntity<String> reply(@RequestBody BoardVO boardvo ) throws Exception {
		ResponseEntity<String> entity = null;
		
		log.info("reply");

		try {
			
			boardService.replyBoard(boardvo);
			
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK); // ajax의result로 넘어감
		} catch (Exception e) {
			e.printStackTrace();

			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}

		return entity;
	}
	
	
	//글작성페이지
	@GetMapping("/write_view")
	public ModelAndView WriteView(ModelAndView mav) {
		mav.setViewName("write_view");
		return mav;
	}
	
	//글작성
	@PostMapping("/write")
	public ResponseEntity<String> write(@RequestBody BoardVO boardvo ) throws Exception {
		ResponseEntity<String> entity = null;
		
		log.info("write");

		try {
			
			boardService.writeBoard(boardvo);
			
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK); // ajax의result로 넘어감
		} catch (Exception e) {
			e.printStackTrace();

			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}

		return entity;
	}
	
	

}
 - 보드서비스 인터페이스 -
package edu.bit.board.service;

import java.util.List;

import edu.bit.board.vo.BoardVO;

public interface BoardService {
	public List<BoardVO> getList();// 리스트

	public void writeBoard(BoardVO boardVO);// 글작성

	public BoardVO getBoard(int getbId);// bId로 content_view

	public void deleteBoard(int getbId); // bId로 delete

	public void modifyBoard(BoardVO boardVO);// 수정
	public int restModifyBoard(BoardVO boardVO);// 수정

	public void replyBoard(BoardVO boardVO); // reply

}

 - 보드 서비스 implements - 
package edu.bit.board.service;

import java.util.List;

import org.springframework.stereotype.Service;

import edu.bit.board.mapper.BoardMapper;
import edu.bit.board.vo.BoardVO;
import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j
@AllArgsConstructor
@Service
public class BoardServiceImpl implements BoardService {

	private BoardMapper mapper;

	@Override
	public List<BoardVO> getList() { // 리스트

		return mapper.getList();
	}

	@Override
	public void writeBoard(BoardVO boardVO) { // 글작성
		log.info("writeBoard..........");
		mapper.insert(boardVO);

	}

	@Override
	public BoardVO getBoard(int bno) {// content_view
		log.info("getBoard..........");
		return mapper.read(bno);
	}

	@Override
	public void deleteBoard(int bno) { // delete
		log.info("deleteBoard..........");
		mapper.delete(bno);

	}

	@Override
	public void modifyBoard(BoardVO boardVO) {// modify
		log.info("modifyBoard..........");
		mapper.modify(boardVO);

	}

	@Override
	public void replyBoard(BoardVO boardVO) {// reply
		log.info("replyBoard..........");
		mapper.reply(boardVO);
		mapper.replyShape(boardVO);

	}

	@Override
	public int restModifyBoard(BoardVO boardVO) {
		// TODO Auto-generated method stub
		return mapper.restModify(boardVO);
	}

}
  - 맵퍼 -
package edu.bit.board.mapper;

import java.util.List;

import edu.bit.board.vo.BoardVO;

public interface BoardMapper {
	public List<BoardVO> getList(); // 리스트출력

	public void insert(BoardVO boardVO); // 글작성

	public BoardVO read(int bno); // contentview

	public void delete(int bno); // delete

	public void modify(BoardVO boardVO); // modify
	public int restModify(BoardVO boardVO); // modify

	public void reply(BoardVO boardVO); // reply

	public void replyShape(BoardVO boardVO);//relpyShape

}
 - 맵퍼.xml -
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.bit.board.mapper.BoardMapper">
	<select id="getList" resultType="edu.bit.board.vo.BoardVO">
		<![CDATA[
			select bId, nName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent from mvc_board order by bGroup desc, bStep asc
		]]>
	</select>
	
	<insert id="insert">
		<![CDATA[
			insert into mvc_board (bId, nName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, #{nName}, #{bTitle}, #{bContent}, 0, mvc_board_seq.currval, 0, 0)
		]]>
	</insert>
	
	<select id="read" resultType="edu.bit.board.vo.BoardVO">
		<![CDATA[
			select * from mvc_board where bId =#{bno}
		]]>
	</select>
	
	<select id="delete" resultType="edu.bit.board.vo.BoardVO">
		<![CDATA[
			delete from mvc_board where bId =#{bno}
		]]>
	</select>
	
	<select id="modify" resultType="edu.bit.board.vo.BoardVO">
		<![CDATA[
			update mvc_board set nName = #{nName}, bTitle = #{bTitle}, bContent = #{bContent} where bId = ${bId}
		]]>
	</select>
	
	<select id="restModify" resultType="edu.bit.board.vo.BoardVO">
		<![CDATA[
			update mvc_board set nName = #{nName}, bTitle = #{bTitle}, bContent = #{bContent} where bId = ${bId}
		]]>
	</select>
	
	<select id="reply" >
		<![CDATA[
			insert into mvc_board (bId, nName, bTitle, bContent, bGroup, bStep, bIndent) values (mvc_board_seq.nextval, #{nName}, #{bTitle}, #{bContent}, #{bGroup},  #{bStep}+1, #{bIndent}+1)
			
		]]>
		
		
	</select>
	
	<select id="replyShape" >
		
		<![CDATA[
			update mvc_board set bStep = bStep + 1 where bGroup = #{bGroup} and bStep > #{bStep}
		]]>
		
	</select>
	
	
	
</mapper>

 - list.jsp -
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">
	
		 $(document).ready(function (){
			$('.delete').click(function(event) {//id는 한 문서에서 유일해야한다. 즉. 한 번만 사용가능 , class는 중복사용 가능
				event.preventDefault();
				var obj = $(this).parent().parent(); //클로저
				
				$.ajax({
					type : "DELETE",
					url : $(this).attr("href"),
					success : function(result){//data타입이 없다면 text로 들어온다.
						console.log(result);
						if(result == "SUCCESS"){
							$(obj).remove();//클로저
						}
					},
					error : function(e){
						console.log(e);
					}										
				});	//ajax			
			});	//click					
		});	//document	
		
	</script>
	
</head>
<body>

	<table  width="500" cellpadding="0" cellspacing="0" border="1">
		<tr>
			<td>번호</td>
			<td>이름</td>
			<td>제목</td>
			<td>날짜</td>
			<td>히트</td>
			<td>삭제</td>
		</tr>
		<c:forEach items="${list}" var="dto">
			<tr>
				<td>${dto.bId}</td>
				<td>${dto.nName}</td>
				<td><c:forEach begin="1" end="${dto.bIndent}">-</c:forEach> 
				<a href="${pageContext.request.contextPath}/restful/board/${dto.bId}">${dto.bTitle}</a></td>
				<td>${dto.bDate}</td>
				<td>${dto.bHit}</td>
				<td ><a class="delete" href="${pageContext.request.contextPath}/restful/delete/${dto.bId}">삭제</a></td>
			</tr>
		</c:forEach>
		<tr>
			<td colspan="6"><a href="write_view">글작성</a></td>
		</tr>
	</table>		
</body>
</html>

 - writeView.jsp -
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Home</title>
	
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	
	<script type="text/javascript">
	
	 $(document).ready(function(){

			$('#write').submit(function(event) {
				event.preventDefault();
				
				var nName = $("#nName").val();
				var bTitle = $("#bTitle").val();
				var bContent = $("#bContent").val();
				
				var write = {
						
						nName : nName,
						bContent : bContent,
						bTitle : bTitle
				};
				
				$.ajax({
					type : "POST",
					url : $(this).attr("action"),
					cache : false,
					contentType:'application/json; charset=utf-8',
					data: JSON.stringify(write),
					success : function(result){
						console.log(result);
						if(result == "SUCCESS"){
							console.log("success");
							$(location).attr('href',"${pageContext.request.contextPath}/restful/board");
							
						}
					},
					error : function(e){						
						alert("fail");
						
						console.log(result);
						console.log(e);
					}										
				});	//ajax			
			});					
		
	   }); // end ready()
	
	</script>
	
	
</head>
<body>
<table width="500" cellpadding="0" cellspacing="0" border="1">
		<form id="write" action="${pageContext.request.contextPath}/restful/write" method="post">
			<tr>
				<td> 이름 </td>
				<td> <input type="text" id="nName" size = "50"> </td>
			</tr>
			<tr>
				<td> 제목 </td>
				<td> <input type="text" id="bTitle" size = "50"> </td>
			</tr>
			<tr>
				<td> 내용 </td>
				<td> <textarea id="bContent" rows="10" ></textarea> </td>
			</tr>
			<tr >
				<td colspan="2"> <input type="submit" value="입력"> &nbsp;&nbsp; <a href="${pageContext.request.contextPath}/restful/board">목록보기</a></td>
			</tr>
		</form>
	</table>
	
</body>
</html>

 - contentView -
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<title>Insert title here</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	
	<script type="text/javascript">
	
	 $(document).ready(function(){

			$('#modify').submit(function(event) {
				event.preventDefault();
				
				var nName = $("#nName").val();
				var bTitle = $("#bTitle").val();
				var bContent = $("#bContent").val();
				var bId = $("#bId").val();
				var form = {
						bId : bId,
						nName : nName,
						bContent : bContent,
						bTitle : bTitle
				};
				
				$.ajax({
					type : "PUT",
					url : $(this).attr("action"),
					cache : false,
					contentType:'application/json; charset=utf-8',
					data: JSON.stringify(form),
					success : function(result){
						console.log(result);
						if(result == "SUCCESS"){
							console.log("success");
							$(location).attr('href',"${pageContext.request.contextPath}/restful/board");
							//window.location.replace("${pageContext.request.contextPath}/restful/board");
						}
					},
					error : function(e){						
						alert("fail");
						
						console.log(result);
						console.log(e);
					}										
				});	//ajax			
			});					
		
	   }); // end ready()
	
	</script>

</head>
<body>

   <table width="500" cellpadding="0" cellspacing="0" border="1">
      <form id="modify" action="${pageContext.request.contextPath}/restful/modify/${content_view.bId}", method="post">
         <input type="hidden" id="bId" value="${content_view.bId}">
         <tr>
            <td> 번호 </td>
            <td> ${content_view.bId} </td>
         </tr>
         <tr>
            <td> 히트 </td>
            <td> ${content_view.bHit} </td>
         </tr>
         <tr>
            <td> 이름 </td>
            <td> <input type="text" id="nName" value="${content_view.nName}"></td>
         </tr>
         <tr>
            <td> 제목 </td>
            <td> <input type="text" id="bTitle" value="${content_view.bTitle}"></td>
         </tr>
         <tr>
            <td> 내용 </td>
            <td> <textarea rows="10" id="bContent" >${content_view.bContent}</textarea></td>
         </tr>
         <tr >
         <!--id="modify" data-bid = "${content_view.bId}"  -->
            <td colspan="2"> <input type="submit" value="수정"> &nbsp;&nbsp; <a href="${pageContext.request.contextPath}/restful/board">목록보기</a> &nbsp;&nbsp; &nbsp;&nbsp; <a href="${pageContext.request.contextPath}/restful/reply_view/${content_view.bId}">답변</a></td>
         </tr>
      </form>
   </table>
   
</body>
</html>

 - replyView -
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<title>Insert title here</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">
	
	 $(document).ready(function(){

			$('#reply').submit(function(event) {
				event.preventDefault();
				
				var bId = $("#bId").val();
				var nName = $("#nName").val();
				var bTitle = $("#bTitle").val();
				var bContent = $("#bContent").val();
				var bGroup = $("#bGroup").val();
				var bStep = $("#bStep").val();
				var bIndent = $("#bIndent").val();
				
				var reply = {
						bId : bId,
						nName : nName,
						bContent : bContent,
						bTitle : bTitle,
						bGroup : bGroup,
						bStep : bStep,
						bIndent : bIndent
				};
				
				$.ajax({
					type : "POST",
					url : $(this).attr("action"),
					cache : false,
					contentType:'application/json; charset=utf-8',
					data: JSON.stringify(reply),
					success : function(result){
						console.log(result);
						if(result == "SUCCESS"){
							console.log("success");
							$(location).attr('href',"${pageContext.request.contextPath}/restful/board");
							
						}
					},
					error : function(e){						
						alert("fail");
						console.log(result);
						console.log(e);
					}										
				});	//ajax			
			});					
		
	   }); // end ready()
	
	</script>


</head>
<body>

   <table  border="1">
      <form action = "${pageContext.request.contextPath}/restful/reply/${reply_view.bId}" id="reply" method="post">
         <input type="hidden" id="bId" value="${reply_view.bId}">
         <input type="hidden" id="bGroup" value="${reply_view.bGroup}">
         <input type="hidden" id="bStep" value="${reply_view.bStep}">
         <input type="hidden" id="bIndent" value="${reply_view.bIndent}">
         <tr>
            <td> 번호 </td>
            <td> ${reply_view.bId} </td>
         </tr>
         <tr>
            <td> 히트 </td>
            <td> ${reply_view.bHit} </td>
         </tr>
         <tr>
            <td> 이름 </td>
            <td> <input type="text" id="nName" value="${reply_view.nName}"></td>
         </tr>
         <tr>
            <td> 제목 </td>
            <td> <input type="text" id="bTitle" value="${reply_view.bTitle}"></td>
         </tr>
         <tr>
            <td> 내용 </td>
            <td> <textarea rows="10"  id="bContent">${reply_view.bContent}</textarea></td>
         </tr>
         <tr >
            <td colspan="2"><input type="submit" value="답변"> <a href="${pageContext.request.contextPath}/restful/board" >목록</a></td>
         </tr>
      </form>
   </table>
   
</body>
</html>

2. 부트스트랩으로 로그인 화면구현후 interceptor 적용하여 로그인한 유저에게만 게시판이 보이도록 하시오.
 - login.jsp -
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<html>
<head>
	<title>로그인</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
 <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>	
</head>
<body class="bg-light text-dark">
<%
	String path = request.getContextPath();
%>
<%=path%>
<c:if test="${user == null}">

<%-- <form role="form" method="post" autocomplete="off" action="<%=path%>/login">
	<p>
		<label for="userId">아이디</label>
		<input type="text" id="userId" name="id" />
	</p>
	<p>
		<label for="userPass">패스워드</label>
		<input type="password" id="userPass" name="pw" />
	</p>
	<p><button type="submit">로그인</button></p>
<!-- 	<p><a href="/member/register">회원가입</a></p> -->
</form>
 --%>


<form  role="form" autocomplete="off" action="<%=path%>/login" method="post">
		<div align="center" class="container">
		<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor"  class="bi bi-bootstrap-fill" viewBox="0 0 16 16">
	  		<path d="M6.375 7.125V4.658h1.78c.973 0 1.542.457 1.542 1.237 0 .802-.604 1.23-1.764 1.23H6.375zm0 3.762h1.898c1.184 0 1.81-.48 1.81-1.377 0-.885-.65-1.348-1.886-1.348H6.375v2.725z"/>
	  		<path d="M4.002 0a4 4 0 0 0-4 4v8a4 4 0 0 0 4 4h8a4 4 0 0 0 4-4V4a4 4 0 0 0-4-4h-8zm1.06 12V3.545h3.399c1.587 0 2.543.809 2.543 2.11 0 .884-.65 1.675-1.483 1.816v.1c1.143.117 1.904.931 1.904 2.033 0 1.488-1.084 2.396-2.888 2.396H5.062z"/>
		</svg>
		
			<h1 align="center">Please sign in</h1>
				<ul class="list-group" >
				    <li class="list-group-item" > <input type="text" id="userId" name="id" value="Eamil Address"> </li>
				    <li class="list-group-item"> <input type="password" id="userPass" name="pw" value="Password"> </li>
		  		</ul>
		  <div class="form-group form-check">
		      <label class="form-check-label">
		        <input  class="form-check-input" type="checkbox" name="remember"> Remember me
		      </label>
	    </div>
	    <button  type="submit" class="btn btn-primary">Sign in</button>
	    <p align="center" class="mt-5 mb-3 text-muted">ⓒ 2017-2018</p>
	</div>
	    
	</form>
</c:if>

<c:if test="${msg == false}">
	<p style="color:#f00;">로그인에 실패했습니다. 아이디 또는 패스워드를 다시 입력해주십시오.</p>
</c:if>

<c:if test="${user != null}">
	<p>${user.username}님 환영합니다.</p>
	
	<!-- <a href="member/modify">회원정보 수정</a>, <a href="member/withdrawal">회원탈퇴</a><br/> -->
	<a href="<%=path%>/list">게시판 리스트</a><br>
	<a href="<%=path%>/logout">로그아웃</a>
	
</c:if>

</body>
</html>

3.intercptor의 개념에 대하여 설명하시오.
권한을 가지지 못한 유저가 권한이 필요한 url에 접속시 요청을 가로채서 입력한  url에 접근하지 못하게 한다.

인터셉터의 설정은 서블릿에 명시
<!-- 인터셉터 객체 생성 -->
   <beans:bean id="boardInterceptor" class="edu.bit.ex.interceptor.BoardInterceptor">
   </beans:bean>
   
   <!-- Interceptor 설정 -->
   <interceptors>
       <interceptor>
           <mapping path="/list"/> <!-- http://localhost:8282/ex/list    -->     
           <exclude-mapping path="/resources/**"/>
           <beans:ref bean="boardInterceptor"/>
       </interceptor>
   </interceptors> 
맵핑한 리스트가 용청이 들어오면 권한이 없는 유저는 접속할 수 없다.

4.부트스트랩이란?
프론트단을 빠르고 쉽게 개발 할 수 있는 프레임워크, HTML, CSS기반의 템플릿 양식이며, JS를 선택적으로 확장가능하다.