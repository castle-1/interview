1."그만"이 입력될 때까지 나라 이름과 인구를 입력받아 저장하고, 다시 나라 이름을 입력받아 인구를 출력하는 프로그램을 작성하라. 다음 해시맵을 이용하라.

나라 이름과 인구를 입력하세요.(예: Korea 5000)

나라 이름, 인구 >> Korea 5000

나라 이름, 인구 >> USA 1000000

나라 이름, 인구 >> Swiss 2000

나라 이름, 인구 >> France 3000

나라 이름, 인구 >> 그만

인구 검색 >> France

France의 인구는 3000

인구 검색 >> 스위스

스위스 나라는 없습니다.

인구 검색 >> 그만

package java_20_12_23_hw;

public class PopulationMain {
	public static void main(String[] args) {
		Population population = new Population();
		population.run();

	}

}

package java_20_12_23_hw;

import java.util.HashMap;
import java.util.Scanner;

public class Population {

	private HashMap<String, Integer> population;
	Scanner sc = new Scanner(System.in);

	public Population() {
		population = new HashMap<String, Integer>();
	}

	public void run() {
		input();
		search();

	}

	private void input() {

		System.out.println("나라 이름과 인구를 입력하세요.(예: Korea 5000)");

		while (true) {

			System.out.print("나라 이름, 인구 >>");
			String country = sc.next();

			if (country.equals("그만")) { //조심

				return;
			}

			int popu = sc.nextInt();
			population.put(country, popu);

		}

	}

	private void search() {
		System.out.println("검색을 시작합니다.");
		while (true) {
			String country;

			System.out.print("인구 검색 >>");
			country = sc.next();

			if (country.equals("그만")) {
				break;
			}
			if (population.containsKey(country)) {
				System.out.println(country + "의 인구는 " + population.get(country));
			} else {
				System.out.println(country + "라는 나라는 없습니다.");
			}

		}

	}

}

___________________________________________________________________________

2.하나의 학생 정보를 나타내는 Student 클래스에는 이름, 학과, 학번, 학점 평균을 저장하는 필드가 있다.

(1) 학생마다 Student 객체를 생성하고 4명의 학생 정보를 ArrayList<Student> 컬렉션에 저장한 후에, ArrayList<Student>의 모든 학생(4명) 정보를 출력하고 학생 이름을 입력받아 해당 학생의 학점 평균을 출력하는 프로그램을 작성하라.

학생 이름, 학과, 학번, 학점평균 입력하세요.

>> 황기태, 모바일, 1, 4.1

>> 이재문, 안드로이드, 2, 3.9

>> 김남윤, 웹공학, 3, 3.5

>> 최찬미, 빅데이터, 4, 4.25

----------------------------------

이름: 황기태

학과: 모바일

학번: 1

학점평균: 4.1

----------------------------------

이름: 이재문

학과: 안드로이드

학번: 2

학점평균: 3.9

----------------------------------

이름: 김남윤

학과: 웹공학

학번: 3

학점평균: 3.5

----------------------------------

이름: 최찬미

학과: 빅데이터

학번: 4

학점평균: 4.25

----------------------------------

학생 이름 >> 최찬미

최찬미, 빅데이터, 4, 4.25

학생 이름 >> 이재문

이재문, 안드로이드, 2, 3.9

학생 이름 >> 그만


package java_20_12_23_hw;

import java.util.ArrayList;
import java.util.Scanner;

public class StudentMain {

	public static void main(String[] args) {

		Scanner sc = null;

		Student hwang = new Student();
		hwang.input();
		Student lee = new Student();
		lee.input();
		Student kim = new Student();
		kim.input();
		Student choe = new Student();
		choe.input();

		ArrayList<Student> stu = new ArrayList<Student>();
		stu.add(hwang);
		stu.add(lee);
		stu.add(kim);
		stu.add(choe);

		for (Student s : stu) {
			System.out.println(s);
		}

		while (true) {
			sc = new Scanner(System.in);
			boolean count = false;
			String student;

			System.out.print("학생 이름 >>");
			student = sc.next();

			if (student.equals("그만")) {
				sc.close();
				return;
			}
			for (int i = 0; i < stu.size(); i++) {

				if (stu.get(i).getName().equals(student)) {
					count = true;

				}
				if (count) {
					stu.get(i).search();
					break;
				}

			} //
			if (count == false) {
				System.out.println("학생을 찾을 수 없습니다.");
			}

		}

	}

}
package java_20_12_23_hw;

import java.util.Scanner;

public class Student {
	private String name, department, grade;
	private double avg;
	Scanner sc = null;

	public void input() {
		sc = new Scanner(System.in);
		System.out.println("학생 이름, 학과, 학년, 학점평균 입력하세요.");

		System.out.print(">>");
		name = sc.next();
		department = sc.next();
		grade = sc.next();
		avg = sc.nextDouble();

	}

	public void search() {
		System.out.println(name + ", " + department + ", " + grade + ", "
				+ avg);

	}

	@Override
	public String toString() {

		return "이름 : " + name + "\n학과 : " + department + 
				"\n학년 : " + grade + "\n학점평균 : " + avg+"\n";

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public String getStudentNumber() {
		return grade;
	}

	public void setStudentNumber(String grade) {
		this.grade = grade;
	}

	public double getAvg() {
		return avg;
	}

	public void setAvg(double avg) {
		this.avg = avg;
	}

}

___________________________________________________________________________

3.ArrayList<Student> 대신, HashMap<String, Studnet> 해시맵을 이용하여 다시 작성하라. 해시맵에서 키는 학생 이름으로 한다.

package java_20_12_23_hw;

public class PopulationMain {
	public static void main(String[] args) {
		Population population = new Population();
		population.run();

	}

}
package java_20_12_23_hw;

import java.util.Scanner;

public class StudentHashMap {
	private String department, grade;
	private double avg;
	Scanner sc = null;

	public void input() {
		sc = new Scanner(System.in);
		System.out.println("학과, 학년, 학점평균 입력하세요.");

		System.out.print(">>");	
		department = sc.next();
		grade = sc.next();
		avg = sc.nextDouble();

	}

	public void search() {
		System.out.println( department + ", " + grade + ", "+ avg);

	}

	@Override
	public String toString() {

		return "학과 : " + department + 
				"\n학년 : " + grade + "\n학점평균 : " + avg+"\n";

	}

	

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public String getStudentNumber() {
		return grade;
	}

	public void setStudentNumber(String grade) {
		this.grade = grade;
	}

	public double getAvg() {
		return avg;
	}

	public void setAvg(double avg) {
		this.avg = avg;
	}

}
___________________________________________________________________________

4.도시 이름, 위도, 경도 정보를 가진 Location 클래스를 작성하고, 도시 이름을 '키'로 하는 HashMap<String, Location> 컬렉션을 만들고, 사용자로부터 입력 받아 4개의 도시를 저장하라. 그리고 도시 이름으로 검색하는 프로그램을 작성하라.

도시, 경도, 위도를 입력하세요.

>> 서울, 37, 126

>> LA, 34, -118

>> 파리, 2, 48

>> 시드니, 151, -33

----------------------------------

서울 37 126

LA 34 -118

파리 2 48

시드니 151 -33

----------------------------------

도시 이름 >> 피리

피리는 없습니다.

도시 이름 >> 파리

파리 2 48

도시 이름 >> 그만

package java_20_12_23_hw;

import java.util.HashMap;
import java.util.Scanner;

public class LocationMain {

	public static void main(String[] args) {
		int count = 1; // while 몇번 반복할지 카운트
		String country;// 도시이름 을 받을 변수
		int longitude, latitude; //위도와 경도를 받을 변수
		Scanner sc = new Scanner(System.in);
		
		HashMap<String, Location> lo = new HashMap<String, Location>();
		//HashMap 의 파라미터로 string와 Location클래스 로 객체 생성
		
		System.out.println("도시, 경도, 위도를 입력하세요.");
		while (true) {

			System.out.print(">>");
			country = sc.next();
			longitude = sc.nextInt();
			latitude = sc.nextInt();

			lo.put(country, new Location(longitude, latitude));
			//HashMap에 도시이름과 Location 클래스의 '생성자'를 통해 위도와 경도를 전달
			count++;

			if (count > 4) {// count가 4가되면 break 즉, 4번 반복
				break;
			}

		}

		while (true) {

			System.out.print("도시 이름 >>");
			country = sc.next();

			if (country.equals("그만")) {
				sc.close();
				return;
			}

			if (lo.containsKey(country)) {
				// HashMap에 입력한 country 가 있다면 true 없다면 false 반환
				//즉, lo.put(country, new Location(longitude, latitude));
				//put 했을때 입력한 도시가 없다면 false 있다면 true
				
				System.out.print(country);
				System.out.print(", " + lo.get(country).getLongitude() + ", " + lo.get(country).getLatitude());
				//HashMap의 value를 호출할때 getter/setter을 통해 위도와 경도를 출력
				//lo.get(파라미터) -> value를 호출하는 방법
			} else {
				System.out.println(country + "는 없습니다.");
			}
			System.out.println();

		}

	}

}
package java_20_12_23_hw;

public class Location {
	
	
	private int longitude;//위도
	private int latitude;//경도
	
	public Location(int longitude, int latitude) { //생성자
		this.longitude = longitude;
		this.latitude = latitude;
	}
	
	public int getLongitude() {
		return longitude;
	}
	public void setLongitude(int longitude) {
		this.longitude = longitude;
	}
	public int getLatitude() {
		return latitude;
	}
	public void setLatitude(int latitude) {
		this.latitude = latitude;
	}
	
	@Override
	public String toString() {
		
		return longitude + "," + latitude;
	}
	
	

}

___________________________________________________________________________

5.이름과 학점(4.5만점)을 5개 입력받아 해시맵에 저장하고, 장학생 선발 기준을 입력 받아 장학생 명단을 출력하라.

미래장학금관리시스템입니다.

이름과 학점 >> 적당히 3.1

이름과 학점 >> 나탈락 2.4

이름과 학점 >> 최고조 4.3

이름과 학점 >> 상당히 3.9

이름과 학점 >> 고득점 4.0

장학생 선발 학점 기준 입력 >> 3.2

장학생 명단 : 최고조 상당히 고득점 

[Hint] HashMap의 전체 요소를 검색하여 학점이 3.2 이상인 학생을 알아내야 한다.

package java_20_12_23_hw;

public class ScholarshipMain {
	public static void main(String[] args) {
		Scholarship scholarship = new Scholarship();
		scholarship.run();

	}
}

package java_20_12_23_hw;

import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Scanner;

public class Scholarship {

	Scanner sc = null;
	private String name;
	private double grades;
	private HashMap<String, Double> sch;

	public Scholarship() {
		sch = new HashMap<String, Double>();

	}

	@Override
	public String toString() {

		return name + " ";
	}
	
	public void run() {
		input();
		selection();
		
	}

	private void input() {
		System.out.println("미래장학금관리시스템입니다.");

		while (true) {
			sc = new Scanner(System.in);
			System.out.print("이름과 학점 >> ");
			name = sc.next();
			if (name.equals("그만")) {
				break;
			}

			grades = sc.nextDouble();

			sch.put(name, grades);

		}

	}

	private void selection() {
		double sel;
		System.out.print("장학생 선발 학점 기준 입력 >>");
		sel = sc.nextDouble(); // 기준 입력한 기준보다 높은 value의 key출력

		System.out.print("장학생명단 : ");

		for (Entry<String, Double> e : sch.entrySet()) { //키와 벨류 한쌍을 가지고있는 객체
			if (e.getValue() > sel) {
				System.out.print(e.getKey() + "\t");
			}

		}

		/*
		 * for (Double d : sch.values()) { if (d> sel) {
		 * System.out.println(sch.entrySet()); //System.out.print(d.toString() + "\t");
		 * 
		 * }
		 * 
		 * 
		 * }
		 */
	}

}
___________________________________________________________________________

6.큐와 스택에 대하여 설명하시오.(필수)
스택 : 마지막에 들어온 데이터가 가장 먼저 나가는 구조
큐 : 먼저 들어온 데이터가 가장 먼저 나가는 구조
___________________________________________________________________________
7.Map 에 대하여 설명하시오.
대응관계를 쉽게 표현할 수 있게 해 주는 자료형
ex) "이름" = "홍길동", "생일" = "몇 월 몇 일"

선언 방법 : HashMap<k,v> map = new HashMap<k,v>();
k = key
v = value
map에 대입할때는 map.put(k,v);
key에 해당하는 값을 출력할때 :map.get();
___________________________________________________________________________
8.아래의 TreeMap의 Value를 확인 하기 위한 소스를 짜시오.(필수)
   TreeMap<Integer, String> map = new TreeMap<>();
   map.put(45, "Brown");
   map.put(37, "James");
   map.put(23, "Martin");

package java_20_12_23_hw;

import java.util.Set;
import java.util.TreeMap;

public class TreeMapValue {

	public static void main(String[] args) {
		TreeMap<Integer, String> map = new TreeMap<>();
		map.put(45, "Brown");
		map.put(37, "James");
		map.put(23, "Martin");

		Set<Integer> ks = map.keySet();

		for (Integer n : ks) {
			System.out.print(map.get(n).toString() + "\t");
		}

	}

}
___________________________________________________________________________

9. 아래의 IntegerComparator를 내림차순 정렬이 되게끔 구현하시오.
class ComparatorIntegerDemo {
    public static void main(String[] args) {
        TreeSet<Integer> tr = new TreeSet<>(new IntegerComparator());
        tr.add(30);
        tr.add(10);    
        tr.add(20);        
        System.out.println(tr);	
    }
}
package java_20_12_23_hw;

import java.util.Comparator;
import java.util.TreeSet;

public class IntegerComparatorDemo {

	public static void main(String[] args) {
		TreeSet<Integer> tr = new TreeSet<Integer>(new IntegerComparator());
		tr.add(30);
		tr.add(10);
		tr.add(20);
		System.out.println(tr);

	}

}

class IntegerComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer o1, Integer o2) {

		return o2.intValue() - o1.intValue();
	}

}
___________________________________________________________________________
10.Objects.hash의 용도와 사용법은?
파라미터를 기준으로 hashcode를 리턴한다.
프로그래머가 원하는대로 사용하려면 오버라이딩하여 기준을 만들고 기준에따라
군집하게 된다.