1.BigInteger 클래스에 대하여 설명하시오.
--------------------------------------------------------------------------------------------
2.아래의 결과 값은 false 출력이 된다.true 가 되도록 INum을짜시오.
   
      INum[] ar1 = new INum[3];
      INum[] ar2 = new INum[3];
      ar1[0] = new INum(1); ar2[0] = new INum(1);
      ar1[1] = new INum(2); ar2[1] = new INum(2);
      ar1[2] = new INum(3); ar2[2] = new INum(3);
      System.out.println(Arrays.equals(ar1, ar2));

class INum {
	private int num;

	public INum(int num) {
		this.num = num;
	}

	@Override
	public boolean equals(Object obj) {

		if (this.num == ((INum) obj).num) {
			return true;
		} else {

			return false;
		}
	}
}
--------------------------------------------------------------------------------------------
3.아래에서 정렬이 이름순으로 되게끔 하시오.Person 객체를 만드시오.
class ArrayObjSearch {
    public static void main(String[] args) {
        Person[] ar = new Person[3];

        ar[0] = new Person("Lee", 29);
        ar[1] = new Person("Goo", 15);
        ar[2] = new Person("Soo", 37);

        Arrays.sort(ar);

public class PersonSort {

	public static void main(String[] args) {
		Person3[] ar = new Person3[3];

        ar[0] = new Person3("Lee", 29); //2
        ar[1] = new Person3("Goo", 15); //1
        ar[2] = new Person3("Soo", 37); //3

        Arrays.sort(ar);
        
        for(Person3 p: ar) {
        	System.out.println(p);
        }

	}

}

class Person3 implements Comparable{
	private String name;
	private int age;
	
	public Person3(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	@Override
	public String toString() {
		
		return name + " : " + age;
	}

	@Override
	public int compareTo(Object o) {
		Person3 p = (Person3) o;
		
		return this.name.charAt(0) - ((Person3)o).name.charAt(0);
	}
	
}
--------------------------------------------------------------------------------------------
4.위의 문제에서 사람의 이름 글자수가 많은순으로 정렬을 되게
끔 person 객체를 만드시오.

public class PersonSort {

	public static void main(String[] args) {
		Person4[] ar = new Person4[3];

        ar[0] = new Person4("Lee1", 29); //2
        ar[1] = new Person4("Goo12", 15); //1
        ar[2] = new Person4("Soo123", 37); //3

        Arrays.sort(ar);
        
        for(Person4 p: ar) {
        	System.out.println(p);
        }

	}

}

class Person4 implements Comparable{
	private String name;
	private int age;
	
	public Person4(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	@Override
	public String toString() {
		
		return name + " : " + age;
	}

	@Override
	public int compareTo(Object o) {
		Person4 p = (Person4) o;
		
		return this.name.length() - ((Person4)o).name.length();
	}
	
}

--------------------------------------------------------------------------------------------
5.경과시간을 맞추는 게임을 작성하라. 다음 예시를 참고하면, 
<Enter> 키를 입력하면 현재 초 시간을 보여주고
 여기서 10초에 더 근접하도록 다음 <Enter> 키를 입력한 사람이 이기는 게임이다.

10초에 가까운 사람이 이기는 게임입니다.
황기태 시작 키  >>
	현재 초 시간 = 42
10초 예상 후 키  >>
	현재 초 시간 = 50
이재문 시작 키  >>
	현재 초 시간 = 51
10초 예상 후 키  >>
	현재 초 시간 = 4
황기태의 결과 8, 이재문의 결과 13, 승자는 황기태

package java_20_12_18;

import java.text.SimpleDateFormat;
import java.util.Scanner;

public class CountTen {

	public static void main(String[] args) {

		int i = 0;
		String[] name = { "황기태", "이재문" };
		int playTime[] = new int[name.length];

		Scanner sc = new Scanner(System.in);
		System.out.println("10초에 가까운 사람이 이기는 게임입니다.");

		while (true) {

			System.out.println(name[i] + "시작 키>>");
			String second = sc.nextLine();
			System.out.printf("현재 초 시간 = ", "%5s");
			String startNowTime = getCurrentTime("ss");
			System.out.println(startNowTime);
			sc.nextLine();

			System.out.print("10초 예상 후 키 = ");
			second = sc.nextLine();
			System.out.print("현재 초 시간 = ");
			String endNowTime = getCurrentTime("ss");
			System.out.println(endNowTime);

			if (Integer.parseInt(endNowTime) < Integer.parseInt(startNowTime)) {
				playTime[i] = (60 - Integer.parseInt(startNowTime)) + Integer.parseInt(endNowTime);

			} else {
				playTime[i] = Integer.parseInt(endNowTime) - Integer.parseInt(startNowTime);
			}
			i++;

			if (i >= name.length) {

				break;
			}

		}

		String temp;
		if (playTime[0] < playTime[1]) {
			temp = name[0];
		} else {
			temp = name[1];
		}

		for (int j = 0; j < name.length; j++) {
			System.out.print(name[j] + "의 결과 " + playTime[j] + ", ");
		}
		System.out.println("승자는 " + temp);

		sc.close();
	}

	public static String getCurrentTime(String timeFormat) {
		return new SimpleDateFormat(timeFormat).format(System.currentTimeMillis());
	}

}

--------------------------------------------------------------------------------------------
7.지넥릭이란?
제네릭 : 실시간 에러를 표시해줌
제네릭 이전 : 
프로그래머의 실수가 컴파일러에 의해서 발견되지 않는다.
실수가 실행 과정에서 조차 발견되지 않을 수 있다!!
--------------------------------------------------------------------------------------------

8. 아래를 프로그래밍 하시오.
Rectangle r1 = new Rectangle(5,6);
Rectangle r2 = new Rectangle(7,9);
Rectangle r3 = Rectangle.compareRect(r1,r2);

System.out.println(r3.getHeight() + " : " + r3.getWidth()  + "입니다.");
=============================
출력 : 9 : 7 입니다.

package java_20_12_18;

public class Rectangle {
	private int height;
	private int width;

	public Rectangle(int width, int height) {
		this.height = height;
		this.width = width;
	}

	public static Rectangle compareRect(Rectangle x, Rectangle y) {

		return new Rectangle((x.getWidth() > y.getWidth() ? x.getWidth() : y.width),
				(x.getHeight() > y.getHeight() ? x.getHeight() : y.getHeight()));

	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

}

--------------------------------------------------------------------------------------------
9. 아래를 프로그래밍 하시오.
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
-  getSortingRec 사각형 배열을 내림차순 정렬한다. 넓이를 기준으로
-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.

Rectangle[] rec = new Rectangle[3];
........
Rectangle[] recSorting = Rectangle.getSortingRec(rec) 
......
package java_20_12_18;

import java.util.Scanner;

public class Rectangle2Main {

	public static void main(String[] args) {

		int width;
		int height;
		Scanner sc = new Scanner(System.in);
		Rectangle2[] rectangle = new Rectangle2[4];

		
		for(int i = 0; i<rectangle.length;i++) {
		
		System.out.println(i+1 +"번 객체 가로를 입력하세요.");
		width = sc.nextInt();
		System.out.println(i+1+"번 객체 세로를 입력하세요.");
		height = sc.nextInt();
		
		rectangle[i] = new Rectangle2(width, height);
		
		}
		Rectangle2[] recSorting = Rectangle2.getSortingRec(rectangle);
		
		for(Rectangle2 r : recSorting) {
			System.out.println(r);
		}
		
		sc.close();

	}

}

package java_20_12_18;

import java.util.Arrays;

public class Rectangle2 implements Comparable {
	private int width, height;

	public Rectangle2(int width, int height) {
		this.width = width;
		this.height = height;
	}

	public int getArea() {
		return width * height;

	}

	public static Rectangle2[] getSortingRec(Rectangle2[] temp) { // 내림차순
		Arrays.sort(temp);

		return temp;

	}

	@Override
	public String toString() {

		return "내림차순 정렬 " + getArea();
	}

	@Override
	public int compareTo(Object o) {

		if (this.getArea() > ((Rectangle2) o).getArea()) {
			return -1;
		} else if (this.getArea() < ((Rectangle2) o).getArea()) {
			return 1;
		} else {

			return 0;
		}
	}

}
