1.is a 관계와 has a 관계에 대하여 설명하시오.
is - a 관계 는 예를 들어 스마트폰은 핸드폰이다 같은 관계가 성립.
has - a 관계는 예를 들어 cpu는 컴퓨터이다. 같은 포함관계

2.다형성이란 무엇인가?

3.아래가 되지 않는 이유에 대하여 메모리 그림으로 설명하시오.
MobilePhone(부모) SmartPhone(자식)
SmartPhone s = new MobilePhone();

4.메소드 오버라이딩 이란?
상위 클래스의 메소드를 하위클래스에서 받아서 메소드를 재정의
이때 메소드의 이름, 파라미터의 데이터타입과 파라미터의 개수가 같아야 한다.

5.갬블링 게임을 만들어보자. 두 사람이 게임을 진행한다. 이들의 이름을 키보드로 입력 받으며 각 사람은 Person 클래스로 작성하라. 그러므로 프로그램에는 2개의 Person 객체가 생성되어야 한다. 두 사람은 번갈아 가면서 게임을 진행하는데 각 사람이 자기 차례에서 <Enter> 키를 입력하면, 3개의 난수가 발생되고 이 숫자가 모두 같으면 승자가 되고 게임이 끝난다. 난수의 범위를 너무 크게 잡으면 3개의 숫자가 일치하게 나올 가능성이 적기 때문에 숫자의 범위는 1~3까지로 한다.

1번째 선수 이름>>수희
2번째 선수 이름>>연수
[수희]:
	3  1  1  아쉽군요!
[연수]:
	3  1  3  아쉽군요!
[수희]:
	2  2  1  아쉽군요!
[연수]:
	1  1  2  아쉽군요!
[수희]:
	3  3  3  수희님이 이겼습니다!

package java_20_12_11;

import java.util.Scanner;

public class PersonMain {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		boolean enter;
		
		Person sh = new Person();
		sh.iput();
		
		Person ys = new Person();	
		ys.iput();

		boolean tf = true;

		while (tf) {
			
			enter = sc.hasNextLine();
			
			if (enter) { 
				sh.gameStart();

				if (sh.br() == true) {
					System.out.println("게임이 종료되었습니다.");
					tf = false;
					break;
				}
			}
			sc.nextLine();
			 
			enter = sc.hasNextLine();

			if (enter) {
				ys.gameStart();

				if (ys.br() == true) {
					System.out.println("게임이 종료되었습니다.");
					tf = false;
					break;
				}
			}
			sc.nextLine();

		}
		sc.close();
	}

}


package java_20_12_11;

import java.util.Scanner;

public class Person {
	
	public static  int count=0;
	private String player;
	private Scanner sc = null;
	private boolean temp;
	
	public Person() {
		this.count++;
	}

	public boolean br() {

		if (this.temp == true) {
			this.temp = true;
		} else {
			this.temp = false;
		}

		return this.temp;

	}

	public void iput() {

		System.out.print(count+"번째 선수 이름>> ");
		sc = new Scanner(System.in);
		player = sc.next();

	}

	public boolean gameStart() {

		int[] playerScore = new int[3];

		System.out.println("[" + player + "] : ");

		for (int j = 0; j < playerScore.length; j++) {
			playerScore[j] = (int) (Math.random() * 3) + 1;
		}

		this.temp = (playerScore[0] == playerScore[1]) ? 
				(playerScore[1] == playerScore[2] ? true : false) : false;

		if (this.temp == true) {
			for (int k = 0; k < playerScore.length; k++) {
				System.out.print(playerScore[k] + " ");

			}

			System.out.println(player + " 님이 이기셨습니다.");

		} else {
			for (int l = 0; l < playerScore.length; l++) {
				System.out.print(playerScore[l] + " ");

			}
			System.out.println(" 아쉽군요.");

		}

		return this.temp;

	}

}



6.문제 
10의 갬블링 게임을 n명이 하도록 수정하라. 
실행 예시와 같이 게임에 참여하는 선수의 수를 입력받고 
각 선수의 이름을 입력받도록 수정하라.

겜블링 게임에 참여할 선수 숫자>>3
1번째 선수 이름>>황
2번째 선수 이름>>이
3번째 선수 이름>>김
[황]:
	2  3  3  아쉽군요!
[이]:
	1  2  2  아쉽군요!
[김]:
	2  2  3  아쉽군요!
[황]:
	3  2  2  아쉽군요!
[이]:
	1  1  3  아쉽군요!
[김]:
	2  2  1  아쉽군요!
[황]:
	2  2  2  황님이 이겼습니다!
package java_20_12_11;

import java.util.Scanner;

public class PersonMain2 {

	public static void main(String[] args) {

		Scanner sc = null;
		String enter;
		Person2 sh = new Person2();

		sh.iput();

		boolean tf = true;

		while (tf) {
			sc = new Scanner(System.in);
			enter = sc.nextLine();

			if (enter.trim().equals("")) {
				sh.gameStart();

				if (sh.br() == true) {
					System.out.println("게임이 종료되었습니다.");
					tf = false;
					break;
				}
			}

		}
		sc.close();
	}

}
package java_20_12_11;

import java.util.Scanner;

public class Person2 {
	
	private int count=0; //엔터할때마다 1을 증가시켜주기위해
	private int playerMax; //플레이어 인원수를 받는 변수
	private String[] player;// 플레이어 이름을 받는 배열
	private Scanner sc = null;
	private boolean temp;
	
	
	public boolean br() {

		if (this.temp == true) {
			this.temp = true;
		} else {
			this.temp = false;
		}

		return this.temp;

	}
	

	public void iput() {

		System.out.print("겜블링 게임에 참여할 선수 숫자 >>");
		sc = new Scanner(System.in);
		this.playerMax = sc.nextInt();

		player = new String[playerMax];

		for(int i = 0;i<player.length;i++) {
			System.out.print(i+1 + "번째 선수 이름>> ");
			player[i] = sc.next();
		}

	}

	public boolean gameStart() {
		
		
		
		int[] playerScore = new int[3]; //1,2,3, 저장배열
		
		if(count>=playerMax) { 
			//playerMax=3이라면  count = 0,1,2 따라서 count가3일때 count=0
			count = 0;
		
		}
		
		System.out.println("[" + player[count] + "] : ");
		
		
			
			for (int j = 0; j < playerScore.length; j++) {
				playerScore[j] = (int) (Math.random() * 3) + 1;
			}

			temp = (playerScore[0] == playerScore[1]) ? 
					(playerScore[1] == playerScore[2] ? true : false) : false;

			if (this.temp == true) {
				for (int k = 0; k < playerScore.length; k++) {
					System.out.print(playerScore[k] + " ");

				}
				System.out.println(player[count] + " 님이 이기셨습니다.");					

			} else {
				for (int l = 0; l < playerScore.length; l++) {
					System.out.print(playerScore[l] + " ");

				}
				System.out.println(" 아쉽군요.");

			}

			count++;
		return temp;

	}

}



7.다음을 만족하는 클래스 Employee를 작성하시오
(8번문제부터는 이것과 관련된 문제입니다).

- 클래스 Employee(직원)은 클래스 Regular(정규직)와 Temporary(비정규직)의 상위 클래스

- 필드: 이름, 나이, 주소, 부서, 월급 정보를 필드로 선언

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 생성자 정의

-메소드 printInfo() : 인자는 없고 자신의 필드 이름, 나이, 주소, 부서를 출력

public class Employee { //상위클래스
	
	public static void main(String[] args) {
		Regular regular = new Regular("kim", 35, "종로구", "영업");
		
		regular.setsetter(500);
		regular.printInfo();
		
		
	}
	
	private String name, address, department;
	private int age, setter;


	public Employee(String name, int age, String address, String  department) {
		this.name = name;
		this.age = age;
		this.address = address;
		this.department = department;
	}
	
	
	public void printInfo() {
		System.out.println("이름 : " + name );
		System.out.println("나이 : " + age);
		System.out.println("주소 : " + address);
		System.out.println("부서 : " + department);
		
	}
	

}


8. 다음을 만족하는 클래스 Regular를 작성하시오.

- 클래스 Regular는 위에서 구현된 클래스 Employee의 하위 클래스

- 생성자 : 이름, 나이, 주소, 부서를 지정하는 상위 생성자 호출

- Setter : 월급 정보 필드를 지정

- 메소드 printInfo() : 인자는 없고 "정규직"이라는 정보와 월급을 출력

class Regular extends Employee{
	private int setter;
	
	public int getsetter() {
		return setter;
	}


	public void setsetter(int setter) {
		this.setter = setter;
	}
	
	public Regular(String name, int age, String address, String  department) {
		super(name, age, address, department);
	}
	
	public void printInfo() {
		System.out.println(setter);
		System.out.println("정규직" );
		
		
	}
	
}

class Temporary extends Employee{
	public Temporary(String name, int age, String address, String  department) {
		super(name, age, address, department);
	}
	
}
