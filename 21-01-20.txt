1.아래를 설명하시오.
-DI
   ->객체 생성 방법 3가지 new,생성자,setter
   -> di는 생성자와 ,setter로 객체 생성 하여 외부에서 주입받는다.
-IoC
   -> di 에서 유례
   -> new로 다이렉트 생성한다면 완제품의 개념이기 때문에 다른 객체를 생성시 다시new해야한다.
	즉, 생산성이 떨어진다.
   -> 하지만 di를 사용한다면  코드가 모듈화 되있기 때문에 부품을 바꾼다는 개념이기 때문에
	언제든지 코드를 바꿀 수 있다.

-IoC 컨테이너
   -> 객체를 담아내는 컨테이너

2. JS로 시간이 초단위로 갱신되는 페이지를 만드시오.
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<script>
		setInterval(function() {
			var today = new Date();
			var hours = today.getHours();
			var min = today.getMinutes();
			var sec = today.getSeconds();
			document.write(hours + " : " + min + " : " + sec + "<br/>");
		}, 1000);
	</script>

</body>
</html>

3.js 에서의 객체생성 방법은?
 - 직접생성
 - 함수를 이용한 생성
 - 생성자를 이용한 생성

4.아래를 자바 스크립트로 작성하시오.
-변수 radius
-get set 함수 작성
-프롬프트로 숫자 입력값 받음
-set 함수를 radius 값 세팅
-객체 생성후 getArea() 함수 호출하면 원넓이 출력

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<script type="text/javascript">
		function radiusCaculator() {
			var radius = 0;
			
			this.rcaculator = function() {
				return (this.radius * this.radius * 3.14).toFixed(2);
			};
			
			this.getRadius = function() {
				return this.radius;
			};
			
			this.setRadius = function(radius) {
				if(!isNaN(radius)){
					this.radius = radius;
				}else {
					console.log("radius is NaN(Not a number)!");
					
				};
			};						
		}
	var rCaculator = new radiusCaculator();
	var inputradius = prompt("반지름을 입력", "반지름");
	alert(inputradius);
	
	rCaculator.setRadius(inputradius);
	document.write("넓이 : " + rCaculator.rcaculator());
	
	</script>

</body>
</html>

5.위와 같은 방식으로 가위바위보 게임을 짜시오.

-DOM 객체를 배우면 이미지도 바꿔 보도록 합시다.


<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<script type="text/javascript">
		function rsp() {
			var player = "";
			var rancom;
			var com;
			
			this.setPlayer= function(player) {
				this.player = player;
			};
			
			
			
			this.rspgame = function() {
				this.rancom = Math.floor((Math.random()*3)+1);
				this.com = (rancom ==1) ? "바위" : (rancom ==2) ?  "가위" : "보";
				if(this.player == "바위"){
					if(this.com == this.player){
						document.write("비겼습니다." + "<br>");
					}else if(this.com == "가위"){
						document.write("이겼습니다." + "<br>");
					}else {
						document.write("졌습니다." + "<br>");
					}								
				}else if(this.player =="가위"){
					if(this.com ==this.player){
						document.write("비겼습니다." + "<br>");
					}else if(this.com == "바위"){
						document.write("졌습니다." + "<br>");
					}else {
						document.write("이겼습니다." + "<br>");
					}
				}else{
						if(this.com == this.player){
							document.write("비겼습니다." + "<br>");
						}else if(this.com == "바위"){
							document.write("이겼습니다." + "<br>");
						}else {
							document.write("졌습니다." + "<br>");
						}
					}
					
					document.write("player : " + this.player + "<br>"
							+"com : " + this.com);
				};
			}
		
		
		var game = new rsp();
		game.setPlayer(prompt("가위,바위,보 게임","가위,바위,보를 내시오"));
		game.rspgame();
	
	
	</script>
</body>
</html>

6.annotation 방식으로 하여 객체 생성후 사각형과 삼각형 넓이를 구하시오.
-main-
package edu.bit.area;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class ClassMain {

	public static void main(String[] args) {
		
		AnnotationConfigApplicationContext ctx = 
				new AnnotationConfigApplicationContext(ApplicationConfig.class);
		
		AreaCaculator triangle = ctx.getBean("triangle",AreaCaculator.class);
		System.out.println("넓이" + triangle.TriangleArea());
		
		AreaCaculator ractangle = ctx.getBean("ractangle",AreaCaculator.class);
		System.out.println("넓이" + ractangle.RactangleArea());
	}

}

-class-
package edu.bit.area;

public class AreaCaculator {
	
	private double width, height;
	
	

	public AreaCaculator(double width, double height) {
		super();
		this.width = width;
		this.height = height;
	}
	
	public double RactangleArea() {
		return width * height;
	}
	
	public double TriangleArea() {
		return (width * height)* 0.5;
	}

	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double getHeight() {
		return height;
	}

	public void setHeight(double height) {
		this.height = height;
	}

}
-ApplicationConfig-
package edu.bit.area;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfig {
	
	@Bean
	public AreaCaculator triangle() {
		AreaCaculator areaCaculator = new AreaCaculator(10, 15);
		areaCaculator.TriangleArea();
		return areaCaculator;
	}
	
	@Bean
	public AreaCaculator ractangle() {
		AreaCaculator areaCaculator = new AreaCaculator(10, 15);
		areaCaculator.RactangleArea();
		return areaCaculator;
	}
	
}




7.금일 배운 Pencil의 예처럼 아래를 인터 페이스를 구현하여, 
원, 삼각형, 사각형의 넓이를 설정파일 에서 바꾸면 각각의 넓이가  구하여 지도록 하시오.

interface IShape{
	double getArea();
}
-main-
package edu.bit.areaInterface;

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

public class ClassMain {

	public static void main(String[] args) {
		
		AbstractApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationCTX.xml");
		Area area = ctx.getBean("area",Area.class);
		area.areaCaculator();
		ctx.close();		
	}
}
-interface-
package edu.bit.areaInterface;

public interface Area {
	abstract void areaCaculator();

}
- class 1 -
package edu.bit.areaInterface;

public class Rectangle implements Area{

	@Override
	public void areaCaculator() {
		AreaCaculator ractangle = new AreaCaculator(10, 3);
		
		System.out.println("사각형 넓이" + ractangle.RactangleArea());
		
	}

}
- class 2 -
package edu.bit.areaInterface;


public class Triangle implements Area{

	@Override
	public void areaCaculator() {
		AreaCaculator triangle = new AreaCaculator(5, 6);
		System.out.println("삼각형넓이" + triangle.TriangleArea());
		
	}

}

- class 3 - 
package edu.bit.areaInterface;

public class AreaCaculator {
	
	private double width, height;
	
	

	public AreaCaculator(double width, double height) {
		super();
		this.width = width;
		this.height = height;
	}
	
	public double RactangleArea() {
		return width * height;
	}
	
	public double TriangleArea() {
		return (width * height)* 0.5;
	}

	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double getHeight() {
		return height;
	}

	public void setHeight(double height) {
		this.height = height;
	}

}
- applicationCTX.xml -
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id = "area" class = "edu.bit.areaInterface.Triangle"></bean>

</beans>


8.스프링 미리 공부 구현 해야될 내용-미리준비해 놓읍시다.(한마디로 외워 제낍시다).
스프링 게시판(오라클 + 마이바티스),스프링 시큐리티, 소셜로그인(OAuth2)-카카오,네이버 먼저, 결재구현(아임포트)

